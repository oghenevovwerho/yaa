package yaa.pojos;

import org.objectweb.asm.Label;
import org.objectweb.asm.TypePath;
import yaa.ast.Parameter;
import yaa.semantic.passes.fs6.F6;
import yaa.semantic.passes.fs6.F6MetaCall;
import yaa.semantic.passes.fs6.f6utils.InternalMetaGen;

import java.lang.annotation.RetentionPolicy;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.objectweb.asm.Opcodes.*;
import static yaa.pojos.GlobalData.*;
import static yaa.pojos.MtdIsWhat.mainMtd;
import static yaa.pojos.MtdIsWhat.topMtd;
import static yaa.semantic.passes.fs6.F6.mw;
import static yaa.semantic.passes.fs6.F6.variableMeta;

public class YaaFun extends YaaInfo {
  public MtdIsWhat mtdIsWhat;
  public boolean isAnonymous;
  public List<YaaInfo> parameters;
  public List<YaaInfo> raw_parameters; //these are the declared parameters b4 generic change took place
  public YaaInfo type = new YaaClz(void$name);
  public YaaInfo rawType;
  public List<YaaClz> inputted = new ArrayList<>(1);
  public Map<String, YaaField> closures = new HashMap<>();
  public YaaClz theRemovedVarArgClz;

  public String owner;
  public boolean itIsTraitMtd = false;
  public boolean hasClzTypeParam;
  public boolean itIsStatic;
  public String iClzDescriptor;
  public String iMtdName;
  public String iMtdDescriptor;
  public String path;
  public List<String> parameterNames;
  public boolean isFinal;
  public boolean isAutoGeneratedFInterfaceMtd;

  public YaaFun(String name, String owner) {
    this.name = name;
    this.owner = owner;
    this.parameters = new ArrayList<>();
  }

  public String signature() {
    return null;
  }

  @Override
  public String descriptor() {
    String return$type = type.descriptor();
    var sb = new StringBuilder();
    sb.append("(");
    for (var field : closures.values()) {
      sb.append(field.descriptor());
    }
    for (var parameter : parameters) {
      sb.append(parameter.descriptor());
    }
    return sb.append(")").append(return$type).toString();
  }

  public String lambdaDescriptor() {
    String return$type = type.descriptor();
    var sb = new StringBuilder();
    sb.append("(");
    for (var parameter : parameters) {
      sb.append(parameter.descriptor());
    }
    return sb.append(")").append(return$type).toString();
  }

  public YaaFun(String name) {
    this.name = name;
    parameters = new ArrayList<>(1);
  }

  public YaaFun(String name, List<YaaInfo> parameters) {
    this.name = name;
    this.parameters = parameters;
  }

  public YaaFun() {
    this.parameters = new ArrayList<>(1);
  }

  public FunCallInfo callInfo;

  @Override
  public YaaFun acceptsMtd(List<YaaInfo> arguments) {
    if (parameters.size() == arguments.size()) {
      var declared_parameters = new ArrayList<YaaInfo>();
      for (int i = 0; i < arguments.size(); i++) {
        var argument = arguments.get(i);
        var parameter = parameters.get(i);
        if (parameter.isIBounded() && !argument.isIBounded()) {
          return null;
        }
        if (!parameter.accepts(argument)) {
          if (parameter instanceof YaaClz clz) {
            if (argument instanceof YaaClz arg$clz) {
              if (!clz.isParentOf(arg$clz)) {
                if (arg$clz.hasTrait(clz) == null) {
                  return null;
                }
              }
            } else {
              return null;
            }
          }
        }
        if (argument.typeParam != null && !argument.isPrimitive()) {
          declared_parameters.add(argument.typeParam.parent);
        } else if (parameter.typeParam != null) {
          declared_parameters.add(parameter.typeParam.parent);
        } else {
          declared_parameters.add(parameter);
        }
      }
      if (raw_parameters != null) {
        declared_parameters = new ArrayList<>(parameters.size());
        declared_parameters.addAll(raw_parameters);
      }
      var callInfo = new FunCallInfo(closures.values(), declared_parameters);
      if (rawType != null) {
        callInfo.declared_type = rawType;
      } else {
        callInfo.declared_type = type;
      }
      var method = (YaaFun) this.cloneInfo();
      method.callInfo = callInfo;
      return method;
    }
    return null;
  }

  public YaaFun setCallInfo(List<YaaInfo> arguments) {
    var declared_parameters = new ArrayList<YaaInfo>();
    var callInfo = new FunCallInfo(closures.values(), declared_parameters);
    for (int i = 0; i < parameters.size(); i++) {
      var argument = arguments.get(i);
      var parameter = parameters.get(i);
      if (argument.typeParam != null && !argument.isPrimitive()) {
        declared_parameters.add(argument.typeParam.parent);
      } else if (parameter.typeParam != null) {
        declared_parameters.add(parameter.typeParam.parent);
      } else {
        declared_parameters.add(parameter);
      }
    }
    if (raw_parameters != null) {
      declared_parameters = new ArrayList<>(parameters.size());
      declared_parameters.addAll(raw_parameters);
    }
    if (rawType != null) {
      callInfo.declared_type = rawType;
    } else {
      callInfo.declared_type = type;
    }
    var method = (YaaFun) this.cloneInfo();
    method.callInfo = callInfo;
    return method;
  }

  public boolean acceptsOpMtd(YaaInfo right_op) {
    if (parameters.size() == 1) {
      var parameter = parameters.get(0);
      if (!parameter.accepts(right_op)) {
        if (parameter instanceof YaaClz clz) {
          if (right_op instanceof YaaClz arg$clz) {
            return clz.isParentOf(arg$clz);
          }
          return false;
        }
      }
      return true;
    }
    return false;
  }

  @Override
  public String toString() {
    return (isAnonymous ? "" : name) + paramString() + type;
  }

  private String paramString() {
    if (parameters.size() == 0) {
      return "()";
    }
    if (parameters.size() == 1) {
      return "(" + parameters.get(0) + ")";
    }
    var sb = new StringBuilder();
    sb.append(parameters.get(0));
    for (int i = 1; i < parameters.size(); i++) {
      sb.append(", ").append(parameters.get(i));
    }
    return "(" + sb + ")";
  }

  public void startCode() {
    F6.f6TopMtd.push(this);
    fs6.push$variables();
    variableMeta.push(new ArrayList<>());
    F6.mtdWriters.push(fs6.cw.peek().visitMethod(
        mtdCodeModifier(),
        name, descriptor(),
        null, new String[]{}
    ));
  }

  public void startCode(FunDecInfo funDecInfo) {
    F6.f6TopMtd.push(this);
    fs6.push$variables();
    variableMeta.push(new ArrayList<>());
    F6.mtdWriters.push(fs6.cw.peek().visitMethod(
        mtdCodeModifier(),
        name, funDecInfo.descriptor(),
        null, new String[]{}
    ));
    mw().visitCode();
  }

  public void initParam(List<Parameter> ast$params) {
    for (var closed$field : closures.values()) {
      var variables = fs6.variables.peek();
      var name = closed$field.field$name;
      var data = closed$field.data;
      switch (data.name) {
        case long$name, double$name -> {
          variables.putWideVar(name);
        }
        default -> variables.putVar(name);
      }
    }
    var variables = fs6.variables.peek();
    for (var param : ast$params) {
      var param$name = param.name.content;
      var param$field = (YaaField) fs.getSymbol(param$name);
      var data = param$field.data;
      switch (data.name) {
        case long$name, double$name -> {
          variables.putWideVar(param$name);
        }
        default -> variables.putVar(param$name);
      }
      var label = new Label();
      mw().visitLabel(label);
      mw().visitLineNumber(param.start.line, label);
      var index = variables.index;
      variableMeta.peek().add(new VariableData(
          param$name, label, data.descriptor(),
          data.clzUseSignature(), index, new ArrayList<>(0), new ArrayList<>(0)
      ));
    }
  }

  public int mtdCodeModifier() {
    var mtd$modifier = ACC_PUBLIC;
    if (privacy == 1) {
      mtd$modifier = ACC_PROTECTED;
    }
    if (privacy == 2) {
      mtd$modifier = ACC_PRIVATE;
    }
    if (mtdIsWhat == MtdIsWhat.abstractMtd) {
      mtd$modifier = mtd$modifier + ACC_ABSTRACT;
    }
    if (mtdIsWhat == MtdIsWhat.staticMtd) {
      mtd$modifier = mtd$modifier + ACC_STATIC;
    }
    if (mtdIsWhat == mainMtd) {
      mtd$modifier = mtd$modifier + ACC_STATIC;
    }
    if (mtdIsWhat == topMtd) {
      mtd$modifier = mtd$modifier + ACC_STATIC;
    }
    return mtd$modifier;
  }

  public void closeCode() {
    if (type.name.equals(void$name)) {
      mw().visitInsn(RETURN);
    }
    var end_label = new Label();
    mw().visitLabel(end_label);
    var variableMetaData = variableMeta.peek();
    for (var meta_data : variableMetaData) {
      var descriptor = meta_data.descriptor;
      mw().visitLocalVariable(
          meta_data.name,
          descriptor,
          meta_data.typeSignature,
          meta_data.label,
          end_label, meta_data.index
      );
      //for the annotations attached to this field
      if (meta_data.metaCalls != null) {
        var starts = new Label[meta_data.metaCalls.size()];
        var ends = new Label[meta_data.metaCalls.size()];
        var indices = new int[meta_data.metaCalls.size()];
        for (int index = 0; index < meta_data.metaCalls.size(); index++) {
          starts[index] = meta_data.label;
          ends[index] = end_label;
          indices[index] = meta_data.index;
        }
        for (var metaCall : meta_data.metaCalls) {
          var meta = (YaaMeta) fs6.getSymbol(metaCall.name.content);
          F6MetaCall.visitArguments(
              metaCall, meta,
              mw().visitLocalVariableAnnotation(
                  1073741824,
                  null,
                  starts,
                  ends,
                  indices,
                  meta.descriptor(),
                  meta.retention == RetentionPolicy.RUNTIME
              )
          );
        }
      }
      if (meta_data.type_args.size() > 0) {
        InternalMetaGen.nestedTypeArgs(meta_data.type_args, (fromString, meta, typeArg, metaCall) -> {
          var started = new Label[typeArg.metaCalls.size()];
          var ended = new Label[typeArg.metaCalls.size()];
          var indexical = new int[typeArg.metaCalls.size()];
          for (int i = 0; i < typeArg.metaCalls.size(); i++) {
            started[i] = meta_data.label;
            ended[i] = end_label;
            indexical[i] = meta_data.index;
          }
          F6MetaCall.visitArguments(
              metaCall, meta,
              mw().visitLocalVariableAnnotation(
                  MetaReference.LOCAL_INTERNAL_META_REF,
                  TypePath.fromString(fromString),
                  started,
                  ended,
                  indexical,
                  meta.descriptor(),
                  meta.retention == RetentionPolicy.RUNTIME
              )
          );
        });
      }
    }
    mw().visitMaxs(0, 0);
    mw().visitEnd();
    F6.mtdWriters.pop();
    fs6.pop$variables();
    variableMeta.pop();
    F6.f6TopMtd.pop();
  }
}